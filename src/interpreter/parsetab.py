
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACC ADD END_INST EQUALS HALT IN IN_USER JEZ JGZ JLZ JMP JNZ LABEL MEM MODULE MOD_BEGIN MOD_END MOV NAME NAME_ALT NEG NUMBER OUT OUT_SCREEN SAV STRING SUB SWPsentence : LABELsentence : SWP END_INSTsentence : SAV END_INSTsentence : SUB NUMBER END_INSTsentence : SUB ACC END_INSTsentence : ADD NUMBER END_INSTsentence : ADD ACC END_INSTsentence : MOV ACC NAME END_INSTsentence : MOV NUMBER ACC END_INSTsentence : MOV IN ACC END_INSTsentence : MOV IN_USER ACC END_INSTsentence : MOV ACC OUT END_INSTsentence : MOV ACC OUT_SCREEN END_INSTsentence : JNZ NAME END_INSTsentence : JEZ NAME END_INSTsentence : JMP NAME END_INSTsentence : MODULE NAME MOD_BEGINsentence : MOD_ENDsentence : STRING NAME EQUALS NAME_ALT END_INSTsentence : HALT END_INSTsentence : '
    
_lr_action_items = {'LABEL':([0,],[2,]),'SWP':([0,],[3,]),'SAV':([0,],[4,]),'SUB':([0,],[5,]),'ADD':([0,],[6,]),'MOV':([0,],[7,]),'JNZ':([0,],[8,]),'JEZ':([0,],[9,]),'JMP':([0,],[10,]),'MODULE':([0,],[11,]),'MOD_END':([0,],[12,]),'STRING':([0,],[13,]),'HALT':([0,],[14,]),'$end':([0,1,2,12,15,16,30,31,32,33,34,41,42,43,44,46,47,48,49,50,51,53,],[-21,0,-1,-18,-2,-3,-20,-4,-5,-6,-7,-14,-15,-16,-17,-8,-12,-13,-9,-10,-11,-19,]),'END_INST':([3,4,14,17,18,19,20,25,26,27,35,36,37,38,39,40,52,],[15,16,30,31,32,33,34,41,42,43,46,47,48,49,50,51,53,]),'NUMBER':([5,6,7,],[17,19,22,]),'ACC':([5,6,7,22,23,24,],[18,20,21,38,39,40,]),'IN':([7,],[23,]),'IN_USER':([7,],[24,]),'NAME':([8,9,10,11,13,21,],[25,26,27,28,29,35,]),'OUT':([21,],[36,]),'OUT_SCREEN':([21,],[37,]),'MOD_BEGIN':([28,],[44,]),'EQUALS':([29,],[45,]),'NAME_ALT':([45,],[52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentence':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentence","S'",1,None,None,None),
  ('sentence -> LABEL','sentence',1,'p_inst_label','parser.py',7),
  ('sentence -> SWP END_INST','sentence',2,'p_inst_swp','parser.py',11),
  ('sentence -> SAV END_INST','sentence',2,'p_inst_sav','parser.py',15),
  ('sentence -> SUB NUMBER END_INST','sentence',3,'p_inst_sub_num','parser.py',19),
  ('sentence -> SUB ACC END_INST','sentence',3,'p_inst_sub_acc','parser.py',23),
  ('sentence -> ADD NUMBER END_INST','sentence',3,'p_inst_add_num','parser.py',27),
  ('sentence -> ADD ACC END_INST','sentence',3,'p_inst_add_acc','parser.py',31),
  ('sentence -> MOV ACC NAME END_INST','sentence',4,'p_inst_mov_acc_name','parser.py',35),
  ('sentence -> MOV NUMBER ACC END_INST','sentence',4,'p_inst_mov_num_acc','parser.py',39),
  ('sentence -> MOV IN ACC END_INST','sentence',4,'p_inst_mov_in_acc','parser.py',43),
  ('sentence -> MOV IN_USER ACC END_INST','sentence',4,'p_inst_mov_inu_acc','parser.py',47),
  ('sentence -> MOV ACC OUT END_INST','sentence',4,'p_inst_mov_acc_out','parser.py',51),
  ('sentence -> MOV ACC OUT_SCREEN END_INST','sentence',4,'p_inst_mov_acc_outp','parser.py',55),
  ('sentence -> JNZ NAME END_INST','sentence',3,'p_inst_jnz','parser.py',59),
  ('sentence -> JEZ NAME END_INST','sentence',3,'p_inst_jez','parser.py',63),
  ('sentence -> JMP NAME END_INST','sentence',3,'p_inst_jmp','parser.py',67),
  ('sentence -> MODULE NAME MOD_BEGIN','sentence',3,'p_new_module','parser.py',71),
  ('sentence -> MOD_END','sentence',1,'p_end_module','parser.py',81),
  ('sentence -> STRING NAME EQUALS NAME_ALT END_INST','sentence',5,'p_string_declaration','parser.py',87),
  ('sentence -> HALT END_INST','sentence',2,'p_halt','parser.py',91),
  ('sentence -> <empty>','sentence',0,'p_vacio','parser.py',95),
]
